package biz.fz5.app.kumquat.model.impl;

import biz.fz5.app.kumquat.model.ContactGroup;
import biz.fz5.app.kumquat.model.ContactGroupModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ContactGroup service. Represents a row in the &quot;Kumquat_ContactGroup&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link biz.fz5.app.kumquat.model.ContactGroupModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContactGroupImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ContactGroupImpl
 * @see biz.fz5.app.kumquat.model.ContactGroup
 * @see biz.fz5.app.kumquat.model.ContactGroupModel
 * @generated
 */
public class ContactGroupModelImpl extends BaseModelImpl<ContactGroup>
    implements ContactGroupModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a contact group model instance should use the {@link biz.fz5.app.kumquat.model.ContactGroup} interface instead.
     */
    public static final String TABLE_NAME = "Kumquat_ContactGroup";
    public static final Object[][] TABLE_COLUMNS = {
            { "contactGroupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "description", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table Kumquat_ContactGroup (contactGroupId LONG not null primary key,companyId LONG,groupId LONG,name VARCHAR(75) null,description VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table Kumquat_ContactGroup";
    public static final String ORDER_BY_JPQL = " ORDER BY contactGroup.contactGroupId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Kumquat_ContactGroup.contactGroupId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.biz.fz5.app.kumquat.model.ContactGroup"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.biz.fz5.app.kumquat.model.ContactGroup"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.biz.fz5.app.kumquat.model.ContactGroup"),
            true);
    public static long COMPANYID_COLUMN_BITMASK = 1L;
    public static long GROUPID_COLUMN_BITMASK = 2L;
    public static long CONTACTGROUPID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.biz.fz5.app.kumquat.model.ContactGroup"));
    private static ClassLoader _classLoader = ContactGroup.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ContactGroup.class
        };
    private long _contactGroupId;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private String _name;
    private String _description;
    private long _columnBitmask;
    private ContactGroup _escapedModel;

    public ContactGroupModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _contactGroupId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setContactGroupId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _contactGroupId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return ContactGroup.class;
    }

    @Override
    public String getModelClassName() {
        return ContactGroup.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("contactGroupId", getContactGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("groupId", getGroupId());
        attributes.put("name", getName());
        attributes.put("description", getDescription());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long contactGroupId = (Long) attributes.get("contactGroupId");

        if (contactGroupId != null) {
            setContactGroupId(contactGroupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }
    }

    @Override
    public long getContactGroupId() {
        return _contactGroupId;
    }

    @Override
    public void setContactGroupId(long contactGroupId) {
        _contactGroupId = contactGroupId;
    }

    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            ContactGroup.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public ContactGroup toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ContactGroup) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ContactGroupImpl contactGroupImpl = new ContactGroupImpl();

        contactGroupImpl.setContactGroupId(getContactGroupId());
        contactGroupImpl.setCompanyId(getCompanyId());
        contactGroupImpl.setGroupId(getGroupId());
        contactGroupImpl.setName(getName());
        contactGroupImpl.setDescription(getDescription());

        contactGroupImpl.resetOriginalValues();

        return contactGroupImpl;
    }

    @Override
    public int compareTo(ContactGroup contactGroup) {
        long primaryKey = contactGroup.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ContactGroup)) {
            return false;
        }

        ContactGroup contactGroup = (ContactGroup) obj;

        long primaryKey = contactGroup.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ContactGroupModelImpl contactGroupModelImpl = this;

        contactGroupModelImpl._originalCompanyId = contactGroupModelImpl._companyId;

        contactGroupModelImpl._setOriginalCompanyId = false;

        contactGroupModelImpl._originalGroupId = contactGroupModelImpl._groupId;

        contactGroupModelImpl._setOriginalGroupId = false;

        contactGroupModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<ContactGroup> toCacheModel() {
        ContactGroupCacheModel contactGroupCacheModel = new ContactGroupCacheModel();

        contactGroupCacheModel.contactGroupId = getContactGroupId();

        contactGroupCacheModel.companyId = getCompanyId();

        contactGroupCacheModel.groupId = getGroupId();

        contactGroupCacheModel.name = getName();

        String name = contactGroupCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            contactGroupCacheModel.name = null;
        }

        contactGroupCacheModel.description = getDescription();

        String description = contactGroupCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            contactGroupCacheModel.description = null;
        }

        return contactGroupCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{contactGroupId=");
        sb.append(getContactGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("biz.fz5.app.kumquat.model.ContactGroup");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>contactGroupId</column-name><column-value><![CDATA[");
        sb.append(getContactGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
